// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: metadata.capnp
#![allow(unreachable_pub)]
#![allow(dead_code)]
pub mod chr {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_major(self) -> u64 {
            self.reader.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn get_minor(self) -> u64 {
            self.reader.get_data_field::<u64>(1)
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 2,
                pointers: 0,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_major(self) -> u64 {
            self.builder.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn set_major(&mut self, value: u64) {
            self.builder.set_data_field::<u64>(0, value);
        }
        #[inline]
        pub fn get_minor(self) -> u64 {
            self.builder.get_data_field::<u64>(1)
        }
        #[inline]
        pub fn set_minor(&mut self, value: u64) {
            self.builder.set_data_field::<u64>(1, value);
        }
    }

    #[cfg(feature = "alloc")]
    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    #[cfg(feature = "alloc")]
    impl Pipeline {}
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 47] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(112, 90, 179, 204, 206, 228, 254, 162),
            ::capnp::word(15, 0, 0, 0, 1, 0, 2, 0),
            ::capnp::word(183, 203, 183, 136, 110, 94, 174, 132),
            ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
            ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(25, 0, 0, 0, 119, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 101, 116, 97, 100, 97, 116, 97),
            ::capnp::word(46, 99, 97, 112, 110, 112, 58, 67),
            ::capnp::word(104, 114, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(41, 0, 0, 0, 50, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(45, 0, 0, 0, 50, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(109, 97, 106, 111, 114, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 105, 110, 111, 114, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
                0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
                1 => <u64 as ::capnp::introspect::Introspect>::introspect(),
                _ => panic!("invalid field index {}", index),
            }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0, 1];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0xa2fe_e4ce_ccb3_5a70;
    }
}

pub mod dir_entry {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_ino(self) -> u64 {
            self.reader.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn get_name(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_name(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 1,
                pointers: 1,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_ino(self) -> u64 {
            self.builder.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn set_ino(&mut self, value: u64) {
            self.builder.set_data_field::<u64>(0, value);
        }
        #[inline]
        pub fn get_name(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_name(&mut self, value: ::capnp::data::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(0).set_data(value);
        }
        #[inline]
        pub fn init_name(self, size: u32) -> ::capnp::data::Builder<'a> {
            self.builder.get_pointer_field(0).init_data(size)
        }
        #[inline]
        pub fn has_name(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
    }

    #[cfg(feature = "alloc")]
    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    #[cfg(feature = "alloc")]
    impl Pipeline {}
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 47] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(229, 236, 93, 69, 176, 175, 227, 153),
            ::capnp::word(15, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(183, 203, 183, 136, 110, 94, 174, 132),
            ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 194, 0, 0, 0),
            ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(25, 0, 0, 0, 119, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 101, 116, 97, 100, 97, 116, 97),
            ::capnp::word(46, 99, 97, 112, 110, 112, 58, 68),
            ::capnp::word(105, 114, 69, 110, 116, 114, 121, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(41, 0, 0, 0, 34, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(45, 0, 0, 0, 42, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(105, 110, 111, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(110, 97, 109, 101, 0, 0, 0, 0),
            ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
                0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
                1 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
                _ => panic!("invalid field index {}", index),
            }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0, 1];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0x99e3_afb0_455d_ece5;
    }
}

pub mod dir {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_entries(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Reader<'a, crate::metadata_capnp::dir_entry::Owned>,
        > {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_entries(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_look_below(self) -> bool {
            self.reader.get_bool_field(0)
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 1,
                pointers: 1,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_entries(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Builder<'a, crate::metadata_capnp::dir_entry::Owned>,
        > {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_entries(
            &mut self,
            value: ::capnp::struct_list::Reader<'a, crate::metadata_capnp::dir_entry::Owned>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(0),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_entries(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::metadata_capnp::dir_entry::Owned> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(0),
                size,
            )
        }
        #[inline]
        pub fn has_entries(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_look_below(self) -> bool {
            self.builder.get_bool_field(0)
        }
        #[inline]
        pub fn set_look_below(&mut self, value: bool) {
            self.builder.set_bool_field(0, value);
        }
    }

    #[cfg(feature = "alloc")]
    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    #[cfg(feature = "alloc")]
    impl Pipeline {}
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 52] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(4, 150, 39, 131, 249, 197, 58, 163),
            ::capnp::word(15, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(183, 203, 183, 136, 110, 94, 174, 132),
            ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
            ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(25, 0, 0, 0, 119, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 101, 116, 97, 100, 97, 116, 97),
            ::capnp::word(46, 99, 97, 112, 110, 112, 58, 68),
            ::capnp::word(105, 114, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(41, 0, 0, 0, 66, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(64, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(61, 0, 0, 0, 82, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(60, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(72, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(101, 110, 116, 114, 105, 101, 115, 0),
            ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(229, 236, 93, 69, 176, 175, 227, 153),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(108, 111, 111, 107, 66, 101, 108, 111),
            ::capnp::word(119, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
        0 => <::capnp::struct_list::Owned<crate::metadata_capnp::dir_entry::Owned> as ::capnp::introspect::Introspect>::introspect(),
        1 => <bool as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0, 1];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0xa33a_c5f9_8327_9604;
    }
}

pub mod blk {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_major(self) -> u64 {
            self.reader.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn get_minor(self) -> u64 {
            self.reader.get_data_field::<u64>(1)
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 2,
                pointers: 0,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_major(self) -> u64 {
            self.builder.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn set_major(&mut self, value: u64) {
            self.builder.set_data_field::<u64>(0, value);
        }
        #[inline]
        pub fn get_minor(self) -> u64 {
            self.builder.get_data_field::<u64>(1)
        }
        #[inline]
        pub fn set_minor(&mut self, value: u64) {
            self.builder.set_data_field::<u64>(1, value);
        }
    }

    #[cfg(feature = "alloc")]
    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    #[cfg(feature = "alloc")]
    impl Pipeline {}
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 47] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(105, 137, 149, 129, 43, 27, 209, 242),
            ::capnp::word(15, 0, 0, 0, 1, 0, 2, 0),
            ::capnp::word(183, 203, 183, 136, 110, 94, 174, 132),
            ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
            ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(25, 0, 0, 0, 119, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 101, 116, 97, 100, 97, 116, 97),
            ::capnp::word(46, 99, 97, 112, 110, 112, 58, 66),
            ::capnp::word(108, 107, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(41, 0, 0, 0, 50, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(45, 0, 0, 0, 50, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(109, 97, 106, 111, 114, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 105, 110, 111, 114, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
                0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
                1 => <u64 as ::capnp::introspect::Introspect>::introspect(),
                _ => panic!("invalid field index {}", index),
            }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0, 1];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0xf2d1_1b2b_8195_8969;
    }
}

pub mod file_chunk {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_blob(self) -> ::capnp::Result<crate::metadata_capnp::blob_ref::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_blob(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_len(self) -> u64 {
            self.reader.get_data_field::<u64>(0)
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 1,
                pointers: 1,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_blob(self) -> ::capnp::Result<crate::metadata_capnp::blob_ref::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_blob(
            &mut self,
            value: crate::metadata_capnp::blob_ref::Reader<'_>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(0),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_blob(self) -> crate::metadata_capnp::blob_ref::Builder<'a> {
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
        }
        #[inline]
        pub fn has_blob(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_len(self) -> u64 {
            self.builder.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn set_len(&mut self, value: u64) {
            self.builder.set_data_field::<u64>(0, value);
        }
    }

    #[cfg(feature = "alloc")]
    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    #[cfg(feature = "alloc")]
    impl Pipeline {
        pub fn get_blob(&self) -> crate::metadata_capnp::blob_ref::Pipeline {
            ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
        }
    }
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 48] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(210, 21, 210, 230, 255, 156, 237, 140),
            ::capnp::word(15, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(183, 203, 183, 136, 110, 94, 174, 132),
            ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 202, 0, 0, 0),
            ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(29, 0, 0, 0, 119, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 101, 116, 97, 100, 97, 116, 97),
            ::capnp::word(46, 99, 97, 112, 110, 112, 58, 70),
            ::capnp::word(105, 108, 101, 67, 104, 117, 110, 107),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(41, 0, 0, 0, 42, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(45, 0, 0, 0, 34, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(98, 108, 111, 98, 0, 0, 0, 0),
            ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(70, 64, 38, 97, 160, 43, 222, 175),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(108, 101, 110, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
        0 => <crate::metadata_capnp::blob_ref::Owned as ::capnp::introspect::Introspect>::introspect(),
        1 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0, 1];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0x8ced_9cff_e6d2_15d2;
    }
}

pub mod file {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_chunks(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Reader<'a, crate::metadata_capnp::file_chunk::Owned>,
        > {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_chunks(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 0,
                pointers: 1,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_chunks(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Builder<'a, crate::metadata_capnp::file_chunk::Owned>,
        > {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_chunks(
            &mut self,
            value: ::capnp::struct_list::Reader<'a, crate::metadata_capnp::file_chunk::Owned>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(0),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_chunks(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::metadata_capnp::file_chunk::Owned> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(0),
                size,
            )
        }
        #[inline]
        pub fn has_chunks(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
    }

    #[cfg(feature = "alloc")]
    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    #[cfg(feature = "alloc")]
    impl Pipeline {}
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 36] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(212, 62, 195, 177, 129, 127, 161, 252),
            ::capnp::word(15, 0, 0, 0, 1, 0, 0, 0),
            ::capnp::word(183, 203, 183, 136, 110, 94, 174, 132),
            ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 162, 0, 0, 0),
            ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(25, 0, 0, 0, 63, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 101, 116, 97, 100, 97, 116, 97),
            ::capnp::word(46, 99, 97, 112, 110, 112, 58, 70),
            ::capnp::word(105, 108, 101, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(4, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(13, 0, 0, 0, 58, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(8, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(36, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(99, 104, 117, 110, 107, 115, 0, 0),
            ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(210, 21, 210, 230, 255, 156, 237, 140),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
        0 => <::capnp::struct_list::Owned<crate::metadata_capnp::file_chunk::Owned> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0xfca1_7f81_b1c3_3ed4;
    }
}

pub mod blob_ref {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_digest(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_digest(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_offset(self) -> u64 {
            self.reader.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn get_compressed(self) -> bool {
            self.reader.get_bool_field(64)
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 2,
                pointers: 1,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_digest(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_digest(&mut self, value: ::capnp::data::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(0).set_data(value);
        }
        #[inline]
        pub fn init_digest(self, size: u32) -> ::capnp::data::Builder<'a> {
            self.builder.get_pointer_field(0).init_data(size)
        }
        #[inline]
        pub fn has_digest(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_offset(self) -> u64 {
            self.builder.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn set_offset(&mut self, value: u64) {
            self.builder.set_data_field::<u64>(0, value);
        }
        #[inline]
        pub fn get_compressed(self) -> bool {
            self.builder.get_bool_field(64)
        }
        #[inline]
        pub fn set_compressed(&mut self, value: bool) {
            self.builder.set_bool_field(64, value);
        }
    }

    #[cfg(feature = "alloc")]
    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    #[cfg(feature = "alloc")]
    impl Pipeline {}
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 63] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(70, 64, 38, 97, 160, 43, 222, 175),
            ::capnp::word(15, 0, 0, 0, 1, 0, 2, 0),
            ::capnp::word(183, 203, 183, 136, 110, 94, 174, 132),
            ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 186, 0, 0, 0),
            ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(25, 0, 0, 0, 175, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 101, 116, 97, 100, 97, 116, 97),
            ::capnp::word(46, 99, 97, 112, 110, 112, 58, 66),
            ::capnp::word(108, 111, 98, 82, 101, 102, 0, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(69, 0, 0, 0, 58, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(64, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(76, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(73, 0, 0, 0, 58, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(68, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(80, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(2, 0, 0, 0, 64, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(77, 0, 0, 0, 90, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(76, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(88, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(100, 105, 103, 101, 115, 116, 0, 0),
            ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(111, 102, 102, 115, 101, 116, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(99, 111, 109, 112, 114, 101, 115, 115),
            ::capnp::word(101, 100, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
                0 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
                1 => <u64 as ::capnp::introspect::Introspect>::introspect(),
                2 => <bool as ::capnp::introspect::Introspect>::introspect(),
                _ => panic!("invalid field index {}", index),
            }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0, 1, 2];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0xafde_2ba0_6126_4046;
    }
}

pub mod xattr {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_key(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_key(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_val(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_val(&self) -> bool {
            !self.reader.get_pointer_field(1).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 0,
                pointers: 2,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_key(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_key(&mut self, value: ::capnp::data::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(0).set_data(value);
        }
        #[inline]
        pub fn init_key(self, size: u32) -> ::capnp::data::Builder<'a> {
            self.builder.get_pointer_field(0).init_data(size)
        }
        #[inline]
        pub fn has_key(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_val(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_val(&mut self, value: ::capnp::data::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(1).set_data(value);
        }
        #[inline]
        pub fn init_val(self, size: u32) -> ::capnp::data::Builder<'a> {
            self.builder.get_pointer_field(1).init_data(size)
        }
        #[inline]
        pub fn has_val(&self) -> bool {
            !self.builder.is_pointer_field_null(1)
        }
    }

    #[cfg(feature = "alloc")]
    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    #[cfg(feature = "alloc")]
    impl Pipeline {}
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 47] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(64, 205, 159, 7, 194, 75, 43, 217),
            ::capnp::word(15, 0, 0, 0, 1, 0, 0, 0),
            ::capnp::word(183, 203, 183, 136, 110, 94, 174, 132),
            ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 170, 0, 0, 0),
            ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(25, 0, 0, 0, 119, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 101, 116, 97, 100, 97, 116, 97),
            ::capnp::word(46, 99, 97, 112, 110, 112, 58, 88),
            ::capnp::word(97, 116, 116, 114, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(41, 0, 0, 0, 34, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(45, 0, 0, 0, 34, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(107, 101, 121, 0, 0, 0, 0, 0),
            ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(118, 97, 108, 0, 0, 0, 0, 0),
            ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
                0 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
                1 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
                _ => panic!("invalid field index {}", index),
            }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0, 1];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0xd92b_4bc2_079f_cd40;
    }
}

pub mod inode_additional {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_xattrs(
            self,
        ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::metadata_capnp::xattr::Owned>>
        {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_xattrs(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_symlink_target(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_symlink_target(&self) -> bool {
            !self.reader.get_pointer_field(1).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 0,
                pointers: 2,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_xattrs(
            self,
        ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::metadata_capnp::xattr::Owned>>
        {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_xattrs(
            &mut self,
            value: ::capnp::struct_list::Reader<'a, crate::metadata_capnp::xattr::Owned>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(0),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_xattrs(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::metadata_capnp::xattr::Owned> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(0),
                size,
            )
        }
        #[inline]
        pub fn has_xattrs(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_symlink_target(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_symlink_target(&mut self, value: ::capnp::data::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(1).set_data(value);
        }
        #[inline]
        pub fn init_symlink_target(self, size: u32) -> ::capnp::data::Builder<'a> {
            self.builder.get_pointer_field(1).init_data(size)
        }
        #[inline]
        pub fn has_symlink_target(&self) -> bool {
            !self.builder.is_pointer_field_null(1)
        }
    }

    #[cfg(feature = "alloc")]
    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    #[cfg(feature = "alloc")]
    impl Pipeline {}
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 53] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(211, 144, 125, 86, 42, 166, 175, 153),
            ::capnp::word(15, 0, 0, 0, 1, 0, 0, 0),
            ::capnp::word(183, 203, 183, 136, 110, 94, 174, 132),
            ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 250, 0, 0, 0),
            ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(29, 0, 0, 0, 119, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 101, 116, 97, 100, 97, 116, 97),
            ::capnp::word(46, 99, 97, 112, 110, 112, 58, 73),
            ::capnp::word(110, 111, 100, 101, 65, 100, 100, 105),
            ::capnp::word(116, 105, 111, 110, 97, 108, 0, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(41, 0, 0, 0, 58, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(64, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(61, 0, 0, 0, 114, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(60, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(72, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(120, 97, 116, 116, 114, 115, 0, 0),
            ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(64, 205, 159, 7, 194, 75, 43, 217),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(115, 121, 109, 108, 105, 110, 107, 84),
            ::capnp::word(97, 114, 103, 101, 116, 0, 0, 0),
            ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
        0 => <::capnp::struct_list::Owned<crate::metadata_capnp::xattr::Owned> as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0, 1];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0x99af_a62a_567d_90d3;
    }
}

pub mod inode {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_ino(self) -> u64 {
            self.reader.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn get_mode(self) -> crate::metadata_capnp::inode::mode::Reader<'a> {
            self.reader.into()
        }
        #[inline]
        pub fn get_uid(self) -> u32 {
            self.reader.get_data_field::<u32>(3)
        }
        #[inline]
        pub fn get_gid(self) -> u32 {
            self.reader.get_data_field::<u32>(4)
        }
        #[inline]
        pub fn get_permissions(self) -> u16 {
            self.reader.get_data_field::<u16>(5)
        }
        #[inline]
        pub fn get_additional(
            self,
        ) -> ::capnp::Result<crate::metadata_capnp::inode_additional::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_additional(&self) -> bool {
            !self.reader.get_pointer_field(1).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 3,
                pointers: 2,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_ino(self) -> u64 {
            self.builder.get_data_field::<u64>(0)
        }
        #[inline]
        pub fn set_ino(&mut self, value: u64) {
            self.builder.set_data_field::<u64>(0, value);
        }
        #[inline]
        pub fn get_mode(self) -> crate::metadata_capnp::inode::mode::Builder<'a> {
            self.builder.into()
        }
        #[inline]
        pub fn init_mode(mut self) -> crate::metadata_capnp::inode::mode::Builder<'a> {
            self.builder.set_data_field::<u16>(4, 0);
            self.builder.reborrow().get_pointer_field(0).clear();
            self.builder.into()
        }
        #[inline]
        pub fn get_uid(self) -> u32 {
            self.builder.get_data_field::<u32>(3)
        }
        #[inline]
        pub fn set_uid(&mut self, value: u32) {
            self.builder.set_data_field::<u32>(3, value);
        }
        #[inline]
        pub fn get_gid(self) -> u32 {
            self.builder.get_data_field::<u32>(4)
        }
        #[inline]
        pub fn set_gid(&mut self, value: u32) {
            self.builder.set_data_field::<u32>(4, value);
        }
        #[inline]
        pub fn get_permissions(self) -> u16 {
            self.builder.get_data_field::<u16>(5)
        }
        #[inline]
        pub fn set_permissions(&mut self, value: u16) {
            self.builder.set_data_field::<u16>(5, value);
        }
        #[inline]
        pub fn get_additional(
            self,
        ) -> ::capnp::Result<crate::metadata_capnp::inode_additional::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_additional(
            &mut self,
            value: crate::metadata_capnp::inode_additional::Reader<'_>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(1),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_additional(self) -> crate::metadata_capnp::inode_additional::Builder<'a> {
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
        }
        #[inline]
        pub fn has_additional(&self) -> bool {
            !self.builder.is_pointer_field_null(1)
        }
    }

    #[cfg(feature = "alloc")]
    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    #[cfg(feature = "alloc")]
    impl Pipeline {
        pub fn get_mode(&self) -> crate::metadata_capnp::inode::mode::Pipeline {
            ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
        }
        pub fn get_additional(&self) -> crate::metadata_capnp::inode_additional::Pipeline {
            ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
        }
    }
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 102] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(161, 114, 128, 2, 173, 206, 117, 185),
            ::capnp::word(15, 0, 0, 0, 1, 0, 3, 0),
            ::capnp::word(183, 203, 183, 136, 110, 94, 174, 132),
            ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 170, 0, 0, 0),
            ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(25, 0, 0, 0, 87, 1, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 101, 116, 97, 100, 97, 116, 97),
            ::capnp::word(46, 99, 97, 112, 110, 112, 58, 73),
            ::capnp::word(110, 111, 100, 101, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(24, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(153, 0, 0, 0, 34, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(148, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(160, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(54, 46, 90, 92, 135, 239, 140, 194),
            ::capnp::word(157, 0, 0, 0, 42, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(2, 0, 0, 0, 3, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(133, 0, 0, 0, 34, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(128, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(140, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(3, 0, 0, 0, 4, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(137, 0, 0, 0, 34, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(132, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(144, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(4, 0, 0, 0, 5, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(141, 0, 0, 0, 98, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(140, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(152, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(5, 0, 0, 0, 1, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(149, 0, 0, 0, 90, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(148, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(160, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(105, 110, 111, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 111, 100, 101, 0, 0, 0, 0),
            ::capnp::word(117, 105, 100, 0, 0, 0, 0, 0),
            ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(103, 105, 100, 0, 0, 0, 0, 0),
            ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(112, 101, 114, 109, 105, 115, 115, 105),
            ::capnp::word(111, 110, 115, 0, 0, 0, 0, 0),
            ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(97, 100, 100, 105, 116, 105, 111, 110),
            ::capnp::word(97, 108, 0, 0, 0, 0, 0, 0),
            ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(211, 144, 125, 86, 42, 166, 175, 153),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
        0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        1 => <crate::metadata_capnp::inode::mode::Owned as ::capnp::introspect::Introspect>::introspect(),
        2 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        3 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        5 => <crate::metadata_capnp::inode_additional::Owned as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0, 1, 2, 3, 4, 5];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0xb975_cead_0280_72a1;
    }

    pub mod mode {
        pub use self::Which::{Blk, Chr, Dir, Fifo, File, Lnk, Sock, Unknown, Wht};

        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::introspect::Introspect for Owned {
            fn introspect() -> ::capnp::introspect::Type {
                ::capnp::introspect::TypeVariant::Struct(
                    ::capnp::introspect::RawBrandedStructSchema {
                        generic: &_private::RAW_SCHEMA,
                        field_types: _private::get_field_types,
                        annotation_types: _private::get_annotation_types,
                    },
                )
                .into()
            }
        }
        impl ::capnp::traits::Owned for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::OwnedStruct for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        #[cfg(feature = "alloc")]
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }
        impl<'a> ::core::marker::Copy for Reader<'a> {}
        impl<'a> ::core::clone::Clone for Reader<'a> {
            fn clone(&self) -> Self {
                *self
            }
        }

        impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
            fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                Self { reader }
            }
        }

        #[cfg(feature = "alloc")]
        impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
            fn from(reader: Reader<'a>) -> Self {
                Self::Struct(::capnp::dynamic_struct::Reader::new(
                    reader.reader,
                    ::capnp::schema::StructSchema::new(
                        ::capnp::introspect::RawBrandedStructSchema {
                            generic: &_private::RAW_SCHEMA,
                            field_types: _private::get_field_types,
                            annotation_types: _private::get_annotation_types,
                        },
                    ),
                ))
            }
        }

        #[cfg(feature = "alloc")]
        impl<'a> ::core::fmt::Debug for Reader<'a> {
            fn fmt(
                &self,
                f: &mut ::core::fmt::Formatter<'_>,
            ) -> ::core::result::Result<(), ::core::fmt::Error> {
                core::fmt::Debug::fmt(
                    &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                    f,
                )
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::core::option::Option<&'a [::capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(reader.get_struct(default)?.into())
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        #[cfg(feature = "alloc")]
        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader<'_> {
                Self { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            #[inline]
            pub fn has_chr(&self) -> bool {
                if self.reader.get_data_field::<u16>(4) != 2 {
                    return false;
                }
                !self.reader.get_pointer_field(0).is_null()
            }
            #[inline]
            pub fn has_dir(&self) -> bool {
                if self.reader.get_data_field::<u16>(4) != 3 {
                    return false;
                }
                !self.reader.get_pointer_field(0).is_null()
            }
            #[inline]
            pub fn has_blk(&self) -> bool {
                if self.reader.get_data_field::<u16>(4) != 4 {
                    return false;
                }
                !self.reader.get_pointer_field(0).is_null()
            }
            #[inline]
            pub fn has_file(&self) -> bool {
                if self.reader.get_data_field::<u16>(4) != 5 {
                    return false;
                }
                !self.reader.get_pointer_field(0).is_null()
            }
            #[inline]
            pub fn which(self) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
                match self.reader.get_data_field::<u16>(4) {
                    0 => ::core::result::Result::Ok(Unknown(())),
                    1 => ::core::result::Result::Ok(Fifo(())),
                    2 => ::core::result::Result::Ok(Chr(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(0),
                            ::core::option::Option::None,
                        ),
                    )),
                    3 => ::core::result::Result::Ok(Dir(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(0),
                            ::core::option::Option::None,
                        ),
                    )),
                    4 => ::core::result::Result::Ok(Blk(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(0),
                            ::core::option::Option::None,
                        ),
                    )),
                    5 => ::core::result::Result::Ok(File(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(0),
                            ::core::option::Option::None,
                        ),
                    )),
                    6 => ::core::result::Result::Ok(Lnk(())),
                    7 => ::core::result::Result::Ok(Sock(())),
                    8 => ::core::result::Result::Ok(Wht(())),
                    x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                }
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
            const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                ::capnp::private::layout::StructSize {
                    data: 3,
                    pointers: 2,
                };
        }
        impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
            fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                Self { builder }
            }
        }

        #[cfg(feature = "alloc")]
        impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
            fn from(builder: Builder<'a>) -> Self {
                Self::Struct(::capnp::dynamic_struct::Builder::new(
                    builder.builder,
                    ::capnp::schema::StructSchema::new(
                        ::capnp::introspect::RawBrandedStructSchema {
                            generic: &_private::RAW_SCHEMA,
                            field_types: _private::get_field_types,
                            annotation_types: _private::get_annotation_types,
                        },
                    ),
                ))
            }
        }

        #[cfg(feature = "alloc")]
        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Self {
                builder
                    .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                    .into()
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::core::option::Option<&'a [::capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(
                    builder
                        .get_struct(
                            <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                            default,
                        )?
                        .into(),
                )
            }
        }

        impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
            fn set_pointer_builder(
                mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                value: Self,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                self.builder.into_reader().into()
            }
            pub fn reborrow(&mut self) -> Builder<'_> {
                Builder {
                    builder: self.builder.reborrow(),
                }
            }
            pub fn reborrow_as_reader(&self) -> Reader<'_> {
                self.builder.as_reader().into()
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.as_reader().total_size()
            }
            #[inline]
            pub fn set_unknown(&mut self, _value: ()) {
                self.builder.set_data_field::<u16>(4, 0);
            }
            #[inline]
            pub fn set_fifo(&mut self, _value: ()) {
                self.builder.set_data_field::<u16>(4, 1);
            }
            #[inline]
            pub fn set_chr(
                &mut self,
                value: crate::metadata_capnp::chr::Reader<'_>,
            ) -> ::capnp::Result<()> {
                self.builder.set_data_field::<u16>(4, 2);
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(0),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_chr(self) -> crate::metadata_capnp::chr::Builder<'a> {
                self.builder.set_data_field::<u16>(4, 2);
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(0),
                    0,
                )
            }
            #[inline]
            pub fn has_chr(&self) -> bool {
                if self.builder.get_data_field::<u16>(4) != 2 {
                    return false;
                }
                !self.builder.is_pointer_field_null(0)
            }
            #[inline]
            pub fn set_dir(
                &mut self,
                value: crate::metadata_capnp::dir::Reader<'_>,
            ) -> ::capnp::Result<()> {
                self.builder.set_data_field::<u16>(4, 3);
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(0),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_dir(self) -> crate::metadata_capnp::dir::Builder<'a> {
                self.builder.set_data_field::<u16>(4, 3);
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(0),
                    0,
                )
            }
            #[inline]
            pub fn has_dir(&self) -> bool {
                if self.builder.get_data_field::<u16>(4) != 3 {
                    return false;
                }
                !self.builder.is_pointer_field_null(0)
            }
            #[inline]
            pub fn set_blk(
                &mut self,
                value: crate::metadata_capnp::blk::Reader<'_>,
            ) -> ::capnp::Result<()> {
                self.builder.set_data_field::<u16>(4, 4);
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(0),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_blk(self) -> crate::metadata_capnp::blk::Builder<'a> {
                self.builder.set_data_field::<u16>(4, 4);
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(0),
                    0,
                )
            }
            #[inline]
            pub fn has_blk(&self) -> bool {
                if self.builder.get_data_field::<u16>(4) != 4 {
                    return false;
                }
                !self.builder.is_pointer_field_null(0)
            }
            #[inline]
            pub fn set_file(
                &mut self,
                value: crate::metadata_capnp::file::Reader<'_>,
            ) -> ::capnp::Result<()> {
                self.builder.set_data_field::<u16>(4, 5);
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(0),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_file(self) -> crate::metadata_capnp::file::Builder<'a> {
                self.builder.set_data_field::<u16>(4, 5);
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(0),
                    0,
                )
            }
            #[inline]
            pub fn has_file(&self) -> bool {
                if self.builder.get_data_field::<u16>(4) != 5 {
                    return false;
                }
                !self.builder.is_pointer_field_null(0)
            }
            #[inline]
            pub fn set_lnk(&mut self, _value: ()) {
                self.builder.set_data_field::<u16>(4, 6);
            }
            #[inline]
            pub fn set_sock(&mut self, _value: ()) {
                self.builder.set_data_field::<u16>(4, 7);
            }
            #[inline]
            pub fn set_wht(&mut self, _value: ()) {
                self.builder.set_data_field::<u16>(4, 8);
            }
            #[inline]
            pub fn which(self) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
                match self.builder.get_data_field::<u16>(4) {
                    0 => ::core::result::Result::Ok(Unknown(())),
                    1 => ::core::result::Result::Ok(Fifo(())),
                    2 => ::core::result::Result::Ok(Chr(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(0),
                            ::core::option::Option::None,
                        ),
                    )),
                    3 => ::core::result::Result::Ok(Dir(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(0),
                            ::core::option::Option::None,
                        ),
                    )),
                    4 => ::core::result::Result::Ok(Blk(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(0),
                            ::core::option::Option::None,
                        ),
                    )),
                    5 => ::core::result::Result::Ok(File(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(0),
                            ::core::option::Option::None,
                        ),
                    )),
                    6 => ::core::result::Result::Ok(Lnk(())),
                    7 => ::core::result::Result::Ok(Sock(())),
                    8 => ::core::result::Result::Ok(Wht(())),
                    x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                }
            }
        }

        #[cfg(feature = "alloc")]
        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        #[cfg(feature = "alloc")]
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                Self {
                    _typeless: typeless,
                }
            }
        }
        #[cfg(feature = "alloc")]
        impl Pipeline {}
        mod _private {
            pub static ENCODED_NODE: [::capnp::Word; 152] = [
                ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
                ::capnp::word(54, 46, 90, 92, 135, 239, 140, 194),
                ::capnp::word(21, 0, 0, 0, 1, 0, 3, 0),
                ::capnp::word(161, 114, 128, 2, 173, 206, 117, 185),
                ::capnp::word(2, 0, 7, 0, 1, 0, 9, 0),
                ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(21, 0, 0, 0, 210, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(25, 0, 0, 0, 255, 1, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(109, 101, 116, 97, 100, 97, 116, 97),
                ::capnp::word(46, 99, 97, 112, 110, 112, 58, 73),
                ::capnp::word(110, 111, 100, 101, 46, 109, 111, 100),
                ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(36, 0, 0, 0, 3, 0, 4, 0),
                ::capnp::word(0, 0, 255, 255, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(237, 0, 0, 0, 66, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(232, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(244, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(1, 0, 254, 255, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(241, 0, 0, 0, 42, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(236, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(248, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(2, 0, 253, 255, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(245, 0, 0, 0, 34, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(240, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(252, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(3, 0, 252, 255, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(249, 0, 0, 0, 34, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(244, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(0, 1, 0, 0, 2, 0, 1, 0),
                ::capnp::word(4, 0, 251, 255, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(253, 0, 0, 0, 34, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(248, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(4, 1, 0, 0, 2, 0, 1, 0),
                ::capnp::word(5, 0, 250, 255, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(1, 1, 0, 0, 42, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(252, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(8, 1, 0, 0, 2, 0, 1, 0),
                ::capnp::word(6, 0, 249, 255, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(5, 1, 0, 0, 34, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 1, 0, 0, 3, 0, 1, 0),
                ::capnp::word(12, 1, 0, 0, 2, 0, 1, 0),
                ::capnp::word(7, 0, 248, 255, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(9, 1, 0, 0, 42, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(4, 1, 0, 0, 3, 0, 1, 0),
                ::capnp::word(16, 1, 0, 0, 2, 0, 1, 0),
                ::capnp::word(8, 0, 247, 255, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(13, 1, 0, 0, 34, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(8, 1, 0, 0, 3, 0, 1, 0),
                ::capnp::word(20, 1, 0, 0, 2, 0, 1, 0),
                ::capnp::word(117, 110, 107, 110, 111, 119, 110, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(102, 105, 102, 111, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(99, 104, 114, 0, 0, 0, 0, 0),
                ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(112, 90, 179, 204, 206, 228, 254, 162),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(100, 105, 114, 0, 0, 0, 0, 0),
                ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(4, 150, 39, 131, 249, 197, 58, 163),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(98, 108, 107, 0, 0, 0, 0, 0),
                ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(105, 137, 149, 129, 43, 27, 209, 242),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(102, 105, 108, 101, 0, 0, 0, 0),
                ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(212, 62, 195, 177, 129, 127, 161, 252),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(108, 110, 107, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(115, 111, 99, 107, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(119, 104, 116, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ];
            pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
                match index {
          0 => <() as ::capnp::introspect::Introspect>::introspect(),
          1 => <() as ::capnp::introspect::Introspect>::introspect(),
          2 => <crate::metadata_capnp::chr::Owned as ::capnp::introspect::Introspect>::introspect(),
          3 => <crate::metadata_capnp::dir::Owned as ::capnp::introspect::Introspect>::introspect(),
          4 => <crate::metadata_capnp::blk::Owned as ::capnp::introspect::Introspect>::introspect(),
          5 => <crate::metadata_capnp::file::Owned as ::capnp::introspect::Introspect>::introspect(),
          6 => <() as ::capnp::introspect::Introspect>::introspect(),
          7 => <() as ::capnp::introspect::Introspect>::introspect(),
          8 => <() as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
            }
            pub fn get_annotation_types(
                child_index: Option<u16>,
                index: u32,
            ) -> ::capnp::introspect::Type {
                panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
            }
            pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
                ::capnp::introspect::RawStructSchema {
                    encoded_node: &ENCODED_NODE,
                    nonunion_members: NONUNION_MEMBERS,
                    members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
                };
            pub static NONUNION_MEMBERS: &[u16] = &[];
            pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];
            pub const TYPE_ID: u64 = 0xc28c_ef87_5c5a_2e36;
        }
        pub enum Which<A0, A1, A2, A3> {
            Unknown(()),
            Fifo(()),
            Chr(A0),
            Dir(A1),
            Blk(A2),
            File(A3),
            Lnk(()),
            Sock(()),
            Wht(()),
        }
        pub type WhichReader<'a> = Which<
            ::capnp::Result<crate::metadata_capnp::chr::Reader<'a>>,
            ::capnp::Result<crate::metadata_capnp::dir::Reader<'a>>,
            ::capnp::Result<crate::metadata_capnp::blk::Reader<'a>>,
            ::capnp::Result<crate::metadata_capnp::file::Reader<'a>>,
        >;
        pub type WhichBuilder<'a> = Which<
            ::capnp::Result<crate::metadata_capnp::chr::Builder<'a>>,
            ::capnp::Result<crate::metadata_capnp::dir::Builder<'a>>,
            ::capnp::Result<crate::metadata_capnp::blk::Builder<'a>>,
            ::capnp::Result<crate::metadata_capnp::file::Builder<'a>>,
        >;
    }
}

pub mod inode_vector {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema {
                generic: &_private::RAW_SCHEMA,
                field_types: _private::get_field_types,
                annotation_types: _private::get_annotation_types,
            })
            .into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }
    impl<'a> ::core::marker::Copy for Reader<'a> {}
    impl<'a> ::core::clone::Clone for Reader<'a> {
        fn clone(&self) -> Self {
            *self
        }
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
        fn from(reader: Reader<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Reader::new(
                reader.reader,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::fmt::Debug for Reader<'a> {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter<'_>,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            core::fmt::Debug::fmt(
                &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                f,
            )
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_inodes(
            self,
        ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::metadata_capnp::inode::Owned>>
        {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_inodes(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 0,
                pointers: 1,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
        fn from(builder: Builder<'a>) -> Self {
            Self::Struct(::capnp::dynamic_struct::Builder::new(
                builder.builder,
                ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema {
                    generic: &_private::RAW_SCHEMA,
                    field_types: _private::get_field_types,
                    annotation_types: _private::get_annotation_types,
                }),
            ))
        }
    }

    #[cfg(feature = "alloc")]
    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_inodes(
            self,
        ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::metadata_capnp::inode::Owned>>
        {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_inodes(
            &mut self,
            value: ::capnp::struct_list::Reader<'a, crate::metadata_capnp::inode::Owned>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(0),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_inodes(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::metadata_capnp::inode::Owned> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(0),
                size,
            )
        }
        #[inline]
        pub fn has_inodes(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
    }

    #[cfg(feature = "alloc")]
    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    #[cfg(feature = "alloc")]
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    #[cfg(feature = "alloc")]
    impl Pipeline {}
    mod _private {
        pub static ENCODED_NODE: [::capnp::Word; 37] = [
            ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
            ::capnp::word(35, 20, 59, 240, 58, 227, 99, 162),
            ::capnp::word(15, 0, 0, 0, 1, 0, 0, 0),
            ::capnp::word(183, 203, 183, 136, 110, 94, 174, 132),
            ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(21, 0, 0, 0, 218, 0, 0, 0),
            ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(29, 0, 0, 0, 63, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(109, 101, 116, 97, 100, 97, 116, 97),
            ::capnp::word(46, 99, 97, 112, 110, 112, 58, 73),
            ::capnp::word(110, 111, 100, 101, 86, 101, 99, 116),
            ::capnp::word(111, 114, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
            ::capnp::word(4, 0, 0, 0, 3, 0, 4, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(13, 0, 0, 0, 58, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(8, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(36, 0, 0, 0, 2, 0, 1, 0),
            ::capnp::word(105, 110, 111, 100, 101, 115, 0, 0),
            ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
            ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(161, 114, 128, 2, 173, 206, 117, 185),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
            match index {
        0 => <::capnp::struct_list::Owned<crate::metadata_capnp::inode::Owned> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
        }
        pub fn get_annotation_types(
            child_index: Option<u16>,
            index: u32,
        ) -> ::capnp::introspect::Type {
            panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
        }
        pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
            ::capnp::introspect::RawStructSchema {
                encoded_node: &ENCODED_NODE,
                nonunion_members: NONUNION_MEMBERS,
                members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
            };
        pub static NONUNION_MEMBERS: &[u16] = &[0];
        pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
        pub const TYPE_ID: u64 = 0xa263_e33a_f03b_1423;
    }
}
